#!/usr/bin/env texlua

os.setlocale ("", "time")
local calendar_url = "https://pages.pedf.cuni.cz/studovna/?booked_ical&sh=aec2580c5bb2542a844ca929b2babb0d"
-- amount of seconds which should be matched for today
local opening_hours = 11 * 60 * 60
local template_name = "template.tex"


local lustache = require "lustache"
local ical = require "ical"
-- kpse.set_program_name "luatex"

local function fetch_url(url)
  local curl = io.popen(string.format("curl -s '%s'",url), "r")
  if not curl then return nil, "Cannot open Curl" end
  local body = curl:read("*all")
  curl:close()
  return body
end

local function load_template(name)
  local f = io.open(name, "r")
  local tpl = f:read("*all")
  f:close()
  return tpl
end

local function run_latex(tex_content,jobname)
  local  latex = io.popen("lualatex-dev -jobname ".. jobname, "w")
  latex:write(tex_content)
  latex:close()
end

-- get correct local time
--
local time_obj = os.date("*t")

local function fix_time(t)
  -- handle daily time saving 
  local time_adjust = time_obj.isdst and 7200 or 3600
  return t + time_adjust
end

local function format_hours(t)
  -- return os.date("%H:%M",t)
  return os.date("%H:%M",fix_time(t))
end

local function get_stop_hour(v)
  -- get hour segment 
  local time = v.stop or ""
  return tonumber(time:match("%d+")) or 1
end

local function get_mail(v)
  local summary = v.description
  local mail = summary:match("^(.-)\\n")
  return mail
end

-- return reservations that will happen in the amount of seconds contained
-- in the difference variable
local function match_reservations(events, difference)
  local m = {}
  local current_time = os.time() --+ 3.5 * 24 * 3600
  for k,v in ipairs(events) do
    local curr_dif = v.DTSTART - current_time
    if math.abs(curr_dif) < difference then
      m[#m+1] = {
        start = format_hours(v.DTSTART),
        stop  = format_hours(v.DTEND),
        name  = v.SUMMARY,
        timestamp = v.DTSTART,
        description = v.DESCRIPTION
      }
    end
  end
  -- sort reservations for the current day chronologically 
  table.sort(m,function(a,b) return a.timestamp < b.timestamp end)
  -- join subse reservations for one person 
  local previous = 1
  -- we need to save size for further processing
  local size = #m
  for i = 2, size do
    if get_mail(m[i]) == get_mail(m[previous]) and 
      get_stop_hour(m[i]) - get_stop_hour(m[previous]) == 1  
    then
      m[previous].stop = m[i].stop
      m[i] = nil
    else
      previous = i
    end
  end
  -- taky zobrazíme čísla skupin
  local skupiny = {}
  local skupiny_count = 0
  local new = {}
  for i = 1, size do
    if m[i] then
      local mail = get_mail(m[i]) 
      local skupina = skupiny[mail] 
      if not skupina then
        skupiny_count = skupiny_count + 1
        skupina = skupiny_count
        skupiny[mail] = skupina
      end
      m[i].skupina = string.format("Skupina %i", skupina)
      table.insert(new, m[i]) 
    end
  end
  return new
end

print("Download calendar")
print(calendar_url)
local ical_str, msg = fetch_url(calendar_url)
if not ical_str then
  print("Error: " .. msg)
  os.exit()
end

local entries = ical.new(ical_str)

local events = ical.events(entries)
local matched = match_reservations(events, opening_hours)

local data = {data=matched}
if #matched > 0 then
  local template = load_template(template_name)
  local tex_content = lustache:render(template, data)
  local jobname = "rezervace"
  run_latex(tex_content,jobname)
  os.execute(string.format("xdg-open '%s'", jobname..".pdf"))
else
  print "Žádné rezervace pro dnešní den"
end
-- for k,v in pairs(matched) do
  -- print(v.start, v.stop)
-- end
